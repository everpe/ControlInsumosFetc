
package interfaz;

import clases.Category;
import clases.Provider;
import clases.Restaurant;
import clases.Supply;
import dialogos.DialogNewProvider;
import dialogos.DialogSupply;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import logicainterfaz.RenderTable;
import logicainterfaz.TableController;

/**
 *
 * @author ever
 */
public class PanelInsumos extends javax.swing.JPanel {


    private Restaurant restaurant;
    private TableController tableController;
    private DefaultTableModel modelo; 
    private DialogSupply dialogSupply;
    
                        
    private final ImageIcon incoEdit = new ImageIcon("src/img/iconEdit2.png");
    private final ImageIcon incoDelete = new ImageIcon("src/img/iconDelete2.png");
    
    private JButton edit;
    private JButton delete;
    private final Font font1= new Font("Cambria", 0, 18);
    /**
     * Creates new form PanelCompras
     */
    public PanelInsumos(String titulo,Restaurant restaurant) {
        initComponents();
        lblTitulo.setText(titulo);
        lblTitulo.setFont(font1);
        this.restaurant=restaurant;
        this.tableController=new TableController(this.restaurant);
        
        this.createTable(restaurant.getSupplies());
    }
    
    
    public PanelInsumos(String titulo) {
        initComponents();
        lblTitulo.setText(titulo);
    }
    
     
    /**
     * Metodo que crea y llena la Tabla.
     * @param insumos 
     */
    public void createTable(ArrayList<Supply>supplies)
    {
        //inicializa estilos de la tabla y sus botones.
        this.initTable();
        //Limpia datos viejos de la tabla
        this.clearDataFromTable();
        //Llena la Tabla con Providers del Restaurante.
        if(supplies.size()>0 && supplies!=null){
            try{
                for(int i=0;i<supplies.size();i++)
                {
                    Supply sup=supplies.get(i);
                    Object [] arreglo ={sup.getId(),sup.getName(),sup.getWeight()
                            ,sup.getCategory().getUnityMeasure(),sup.getCategory().getName(),edit,delete};
                    modelo.addRow(arreglo);    
                }
                table.setModel(modelo);
            }catch(Exception e){ 
                System.out.println("ERROR:pintando tabla proveedores"+e.getMessage());
            }
        }
       
    }
    
    
    /**
     * Da configuración y estilos a la Tabla y sus botones
     */
    public void initTable(){
        
        edit= new JButton("Editar");
        edit.setIcon(incoEdit);
        edit.setName("btnEdit");
        edit.setBackground(new Color(37, 122, 218 ));
        edit.setForeground(new Color(255,255,255));
         
        
        delete= new JButton("Borrar");
        delete.setIcon(incoDelete);
        delete.setName("btnDelete");
        delete.setBackground(new Color(217, 99, 126 ));
        delete.setForeground(new Color(255,255,255));
         
        
        table.setDefaultRenderer(Object.class, new RenderTable());
        //Define Columnas y desabilita edicion.
        this.modelo = new DefaultTableModel(
                        new Object[][]{{"","","","","","",""}},
                        new Object[] {"ID","Nombre","Peso_Actual","Unidad_Medida","Categoria","M","E"} 
                    ){
                        public boolean isCellEditable(int rowIndex, int vColIndex) {
                            return false;
                        }
                    };
        JTableHeader header = table.getTableHeader();
        header.setFont(font1);
        header.setForeground(new Color(255,255,255));
        header.setBackground(new Color(73, 93, 101 ));
    }
    
    /**
     * Hace el barrido de la información contenida en una tabla.
     * @param modeloTabla Modelo de la tabla que se desea barrer.
     */
    public void clearDataFromTable()
    {        
        int a =modelo.getRowCount()-1;
        for(int i=a; i>=0; i--)
        {
            modelo.removeRow(i);
        }            
    }
    
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitulo = new javax.swing.JLabel();
        scrollTable = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));

        lblTitulo.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 21)); // NOI18N
        lblTitulo.setForeground(new java.awt.Color(51, 51, 51));
        lblTitulo.setText("TITULO DE LA TABLA");

        scrollTable.setBackground(new java.awt.Color(255, 255, 255));
        scrollTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                scrollTableMouseClicked(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        scrollTable.setViewportView(table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(325, 325, 325))
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(scrollTable, javax.swing.GroupLayout.PREFERRED_SIZE, 814, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(lblTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(scrollTable, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(104, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void scrollTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scrollTableMouseClicked
        
        
    }//GEN-LAST:event_scrollTableMouseClicked

    
    /**
     * Evento cuando se clickea la Table del Panel
     * @param evt 
     */
    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        int col=table.getColumnModel().getColumnIndexAtX(evt.getX());
        int row=evt.getY()/table.getRowHeight();
        
        //Verifica que lo que clikeo fué un boton
        if(row < table.getRowCount()  && row >= 0 && col < table.getColumnCount()
                && col >= 0){
            Object value=table.getValueAt(row, col);
            if(value instanceof JButton){
                ((JButton)value).doClick();
                JButton btn= (JButton)value;
                
                if(btn.getName().equals("btnEdit")){
                    this.editSupply();
                }else if(btn.getName().equals("btnDelete")){
                    this.deleteSupply();
                }
                System.out.println(btn.getName());
            }
//            
            
        }
    }//GEN-LAST:event_tableMouseClicked

    
    
    
    /**
     * Se llama al darle click a la tabla en el boton delete.
     */
    public void deleteSupply(){
        Supply sup = this.tableController.getSupplyFromTableSupplies(this.table);
        if(sup == null)
            JOptionPane.showMessageDialog(this, "No Se Seleccionó Ningún Proveedor");
        else
        {            
            int opc = JOptionPane.showConfirmDialog(null, "Realmente Desea Eliminar El Insumo"+sup.getName().toUpperCase(),
                    "Eliminar Insumo"+sup.getName().toUpperCase(), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            //0 para si || 1 para no
            if (opc == 0)
            {
                boolean ban = this.restaurant.getBd().getCrudSupply().deleteSupply(Integer.parseInt(sup.getId()));
                //Si se elimino el proveedor de la base de datos.
                if(ban)
                {
                    JOptionPane.showMessageDialog(this, "Insumo " + " Eliminado Correctamente");
                    this.restaurant.updateDataBase();
                    this.createTable(this.restaurant.getSupplies());
//                    this.pintor.paintTableProviders(this.tequilazo.getProveedores(), this.modeloListaProveedores);
                }
                else
                {
                    JOptionPane.showMessageDialog(this, "No Se Pudo Eliminar El Proveedor De La Base De Datos");
                }
            }            
        }          
//        System.out.println("deleteProvide");
    }
    
    
    /**
     * Se llama al dar click en la tabla, boton editar
     * Interactua con la BD del Restaurante
     */
    public void editSupply(){
       
        Supply  supOld = this.tableController.getSupplyFromTableSupplies(this.table);
        
        System.out.println("El Supply viejo Table es "+supOld.getName());
        if(supOld == null)
            JOptionPane.showMessageDialog(this, "No Se Seleccionó Ningún Proveedor");
        else
        {            
            
            ArrayList<Category>categories=this.restaurant.getBd().getCrudCategory().getAllCategories();
            
            this.dialogSupply= new  DialogSupply(null, true,2,categories);
            this.dialogSupply.setSupply(supOld);
            this.dialogSupply.setVisible(true);
            //el dialogo modifica el provedor de la table y me da uno nuevo
            Supply supNew=dialogSupply.getSupply();
            System.out.println("El nuevo supNew es:::::::::"+supNew.getName());
            boolean ban = this.restaurant.getBd().getCrudSupply().updateSupply(supOld, supNew);
           
            if(ban)
            {
                JOptionPane.showMessageDialog(this, "Insumo  Actualizado Correctamente");
                this.restaurant.updateDataBase();
                this.createTable(this.restaurant.getSupplies());
            }
            else
            {
                JOptionPane.showMessageDialog(this, "No Se Pudó Editar el Insumo");
            }          
        }  
        
        System.out.println("editProvide");
    }
    
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JScrollPane scrollTable;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
